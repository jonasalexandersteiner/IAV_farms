---
title: "SIV Risk Factor Analysis: PLS Regression"
output:
  html_document:
    toc: true
    toc_float: true
    toc_depth: 3
    theme: readable
    df_print: paged
    highlight: tango
author: "jonasalexandersteiner"
date: "`r format(Sys.time(), '%Y-%m-%d %H:%M:%S UTC')`"
params:
  pls_results: NULL
---

```{r setup, include=FALSE}
library(tidyverse)
library(DT)
library(plotly)
library(viridis)
library(kableExtra)
library(MultBiplotR)
library(ggplot2)
library(factoextra)

# Load analysis results from file or parameter
if (exists("params") && !is.null(params$pls_results)) {
  pls_results <- params$pls_results
} else if (file.exists("pls_analysis_results.rds")) {
  pls_results <- readRDS("pls_analysis_results.rds")
} else {
  stop("Could not find pls_analysis_results.rds. Please provide results via params or run the analysis script.")
}

# Extract objects for downstream analysis and visualization
X <- pls_results$X
SIV_status <- pls_results$SIV_status
coef_df <- pls_results$coef_df
explained_var <- pls_results$explained_var
ncomp_optimal <- pls_results$ncomp_optimal
sample_size <- pls_results$sample_size
predictor_count <- pls_results$predictor_count
original_predictor_count <- pls_results$original_predictor_count
date_time <- pls_results$date_time
author <- pls_results$author

# Matrix Conversion and Safe Names
X_mat <- as.matrix(X)
if (is.null(colnames(X_mat)) || !is.character(colnames(X_mat))) {
  colnames(X_mat) <- paste0("Var", seq_len(ncol(X_mat)))
}
colnames(X_mat) <- make.unique(as.character(colnames(X_mat)))
if (is.null(rownames(X_mat)) || !is.character(rownames(X_mat))) {
  rownames(X_mat) <- paste0("Sample", seq_len(nrow(X_mat)))
}
rownames(X_mat) <- make.unique(as.character(rownames(X_mat)))

# Input Validation
setup_ok <- (
  !is.null(X_mat) &&
  is.matrix(X_mat) &&
  nrow(X_mat) > 1 && ncol(X_mat) > 1 &&
  is.numeric(X_mat) &&
  !any(duplicated(rownames(X_mat))) &&
  !any(duplicated(colnames(X_mat))) &&
  !is.null(SIV_status) &&
  length(SIV_status) == nrow(X_mat) &&
  !any(is.na(SIV_status)) &&
  length(levels(as.factor(SIV_status))) > 1 &&
  !any(is.na(X_mat))
)
```

# SIV Risk Factor Analysis

## Analysis Summary

- **Author**: `r author`
- **Date**: `r date_time`
- **Sample Size**: `r sample_size`
- **Original Predictor Count**: `r original_predictor_count`
- **Predictors after filtering**: `r predictor_count`
- **Optimal number of components**: `r ncomp_optimal`
- **Variance explained by each component**: `r paste(round(explained_var, 2), collapse = ', ')` %

---

## PLSR Sample Scores Plot (Colored by SIV Status, with Ellipses)

```{r plsr-sample-scores-plot, echo=FALSE, fig.width=8, fig.height=6, message=FALSE, warning=FALSE}
if (setup_ok && !is.null(pls_results$pls_model)) {
  pls_mod <- pls_results$pls_model
  ncomp_use <- ncomp_optimal
  scores <- pls::scores(pls_mod)[, 1:2, drop=FALSE]
  scores_df <- as.data.frame(scores)
  colnames(scores_df) <- c("Comp1", "Comp2")
  scores_df$SIV_status <- as.factor(SIV_status)
  scores_df$Sample <- rownames(scores_df)

  ggplot(scores_df, aes(x = Comp1, y = Comp2, color = SIV_status)) +
    geom_point(size = 3, alpha = 0.8) +
    stat_ellipse(aes(group=SIV_status), linetype="dashed", size=1, alpha=0.6) +
    labs(title = "PLSR: Sample Scores by SIV Status",
         x = "PLSR Component 1",
         y = "PLSR Component 2",
         color = "SIV status") +
    theme_minimal()
}
```

## PLSR Variable Loadings Interactive Barplots (Components 1 and 2)

```{r plsr-variable-loadings-interactive-barplots, echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
if (setup_ok) {
  pls_mod <- pls_results$pls_model
  loadings <- pls::loadings(pls_mod)[, 1:2, drop=FALSE]
  loadings_df <- as.data.frame(loadings)
  colnames(loadings_df) <- c("Comp1", "Comp2")
  loadings_df$Predictor <- rownames(loadings_df)
  loadings_df <- na.omit(loadings_df)
  loadings_df1 <- loadings_df %>% arrange(desc(abs(Comp1)))
  loadings_df2 <- loadings_df %>% arrange(desc(abs(Comp2)))

  plot1 <- plot_ly(
    data = loadings_df1,
    x = ~seq_len(nrow(loadings_df1)),
    y = ~Comp1,
    type = 'bar',
    text = ~paste0("Predictor: ", Predictor, "<br>Loading: ", round(Comp1, 3)),
    hoverinfo = 'text',
    marker = list(color = 'skyblue'),
    showlegend = FALSE
  ) %>%
    layout(
      title = "PLSR Variable Loadings: Component 1 (interactive)",
      xaxis = list(
        title = "Variable index",
        tickvals = list(),
        showticklabels = FALSE
      ),
      yaxis = list(title = "Loading"),
      bargap = 0.2,
      margin = list(b = 100, t = 80)
    )

  plot2 <- plot_ly(
    data = loadings_df2,
    x = ~seq_len(nrow(loadings_df2)),
    y = ~Comp2,
    type = 'bar',
    text = ~paste0("Predictor: ", Predictor, "<br>Loading: ", round(Comp2, 3)),
    hoverinfo = 'text',
    marker = list(color = 'orange'),
    showlegend = FALSE
  ) %>%
    layout(
      title = "PLSR Variable Loadings: Component 2 (interactive)",
      xaxis = list(
        title = "Variable index",
        tickvals = list(),
        showticklabels = FALSE
      ),
      yaxis = list(title = "Loading"),
      bargap = 0.2,
      margin = list(b = 100, t = 80)
    )

  htmltools::tagList(
    htmltools::tags$h3("PLSR Variable Loadings: Component 1"),
    plot1,
    htmltools::tags$h3("PLSR Variable Loadings: Component 2"),
    plot2
  )
}
```

---

## Explained Variance by Components

```{r explained-var-plot, echo=FALSE, fig.height=4}
barplot(explained_var,
        main = "Variance Explained by Components",
        xlab = "Component",
        ylab = "% Variance Explained",
        col = viridis(length(explained_var)))
```

---

## RMSEP Plot (Model Validation)

```{r rmsep-plot, echo=FALSE, fig.height=4}
if (!is.null(pls_results$pls_model)) {
  plot(RMSEP(pls_results$pls_model), main = "RMSE by Number of Components")
  abline(v = ncomp_optimal, col = "red", lty = 2)
}
```

---

## Top 15 PLS Predictors (by absolute coefficient)

```{r top-predictors-table, echo=FALSE}
top_n <- min(15, nrow(coef_df))
top_predictors <- coef_df[1:top_n, ]
DT::datatable(top_predictors,
              caption = "Top 15 Predictors by Absolute PLS Coefficient",
              options = list(pageLength = 15))
```

---

## Component Axis Formulas

```{r axis-formula, echo=FALSE, results='asis'}
if (setup_ok) {
  pca_biplot <- PCA.Biplot(X_mat, alpha = 1, Scaling = 4)
  loadings_comp1 <- pca_biplot$ColCoordinates[, 1]
  loadings_comp2 <- if (ncol(pca_biplot$ColCoordinates) >= 2) pca_biplot$ColCoordinates[, 2] else NULL

  formula_comp1 <- paste(sprintf("%.3f*%s", loadings_comp1, rownames(pca_biplot$ColCoordinates)), collapse = " + ")
  cat("<b>Component 1 Axis (linear combination of predictors):</b><br/>")
  cat("Score_Comp1 = ", formula_comp1, "<br/><br/>")

  if (!is.null(loadings_comp2)) {
    formula_comp2 <- paste(sprintf("%.3f*%s", loadings_comp2, rownames(pca_biplot$ColCoordinates)), collapse = " + ")
    cat("<b>Component 2 Axis (linear combination of predictors):</b><br/>")
    cat("Score_Comp2 = ", formula_comp2, "<br/><br/>")
  }
}
```

---

## Sample Scores Table (Component 1 & 2)

```{r sample-scores-table, echo=FALSE}
if (setup_ok) {
  pca_biplot <- PCA.Biplot(X_mat, alpha = 1, Scaling = 4)
  scores_df <- as.data.frame(pca_biplot$RowCoordinates[, 1:min(2, ncol(pca_biplot$RowCoordinates))])
  colnames(scores_df) <- paste0("Comp.", 1:ncol(scores_df))
  scores_df$SIV_positive <- as.factor(SIV_status)
  scores_df$Sample <- rownames(scores_df)
  scores_df <- scores_df[, c("Sample", "Comp.1", if ("Comp.2" %in% names(scores_df)) "Comp.2", "SIV_positive")]

  DT::datatable(scores_df,
                caption = "Sample Scores for Component 1 and 2 (with SIV Positivity)",
                options = list(pageLength = 25))
}
```

---

## Residuals Plot for PLS Regression

```{r residuals-plot, echo=FALSE, fig.height=4}
if (!is.null(pls_results$pls_model)) {
  residuals <- as.numeric(residuals(pls_results$pls_model))
  plot(residuals, main="PLS Regression Residuals", ylab="Residual", xlab="Sample")
  abline(h=0, col="red", lty=2)
}
```

---

## Model Diagnostics and Notes

- **Model algorithm:** SIMPLS (pls package) plus MultBiplotR for biplot visualizations.
- **Cross-validation:** Leave-One-Out (LOO)
- **Aggressive filtering:** Predictors with near-zero variance, rare values, or high missingness were removed.
- **Interpretation:** Predictors with largest absolute coefficients are most influential for SIV status. Signs (positive/negative) indicate risk/protection.
- **Biplots:** MultBiplotR visualizations show both sample and variable relationships, group separation, and logistic relationships.
- **Component axis formulas:** Display the linear combinations that define each component.
- **Sample scores table:** Shows each sampleâ€™s score along the main axes.
- **Residuals plot:** Shows regression residuals for further diagnostics.
- **Report reproducibility:** If you re-run the analysis, results may differ based on filtering, random seeds, or underlying data.

---

## Session Information

```{r session-info}
sessionInfo()
```

---

# End of Report

This interactive report summarizes the results of the SIV regression and multivariate analysis using advanced biplot techniques.  
For questions, contact `r author`.  
Date/time: `r format(Sys.time(), '%Y-%m-%d %H:%M:%S UTC')`