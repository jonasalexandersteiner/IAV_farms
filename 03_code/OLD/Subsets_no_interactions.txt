# Render R Markdown for descriptive statistics report:
#rmarkdown::render("eda_report2.Rmd", params = list(), envir = globalenv())

# =====================================================================
# INFERENTIAL ANALYSIS: SIV_positive (Univariate Only by Subset)
# ---------------------------------------------------------------------
# - For each subset (Husbandry, Animals, Environment, Human):
#   - Univariate: Test each variable (continuous or categorical) vs SIV_positive
#     - For continuous, use custom assignment: t-test or Wilcoxon (see below)
#     - For categorical/discrete, use chi-squared or Fisher's exact test
#   - Holm-Bonferroni correction is applied ONCE to all p-values per subset
#   - FDR correction is applied to all univariate results per subset
# - Output: One HTML file with four interactive tables (one per subset)
# - Meta/outcome variables and overview-dependent variables are excluded from all analyses
# =====================================================================

# ---------------------------------------------------------------------
# LOAD REQUIRED LIBRARIES
# ---------------------------------------------------------------------
library(dplyr)
library(purrr)
library(DT)
library(htmltools)
library(progressr)
handlers(global = TRUE)

# ---------------------------------------------------------------------
# 1. VARIABLE SUBSETS (EXCLUDING META/OUTCOME/DEPENDENT VARIABLES)
# ---------------------------------------------------------------------
exclude_vars <- c(
  "farm_id", "SIV_positive", "total_no_of_samples", "no_positive_pigs",
  "percentage_positive_pigs", "min_cp", "max_cp", "average_cp", "std_dev", "date_sampling", "source_of_contact_grouped"
)
overview_dependent_vars <- c(
  "quarantaine_time", "outside_area_ai_centre", "outside_area_gilts_stable",
  "outside_area_farrowing_stable", "outside_area_weaner_stable", "outside_area_fattener_stable"
)

husbandry_vars <- setdiff(
  c("symptomatic_report", "canton_factor", "herdsize", "production_type_factor",
    "Farrowing_on_farm", "Isemination_on_farm", "Gestation_on_farm", "Weaners_on_farm", "Fattening_on_farm",
    "horses_closeby", "dogs_closeby", "chicken_closeby", "turkey_closeby",
    "cattle_closeby", "cats_closeby", "other_pigs_closeby", "other_poultry_closeby",
    "number_suckling_piglets", "number_weaners", "number_fattening_pigs", "number_young_sows",
    "number_old_sows", "number_boars", "number_of_origins", "quarantaine_concept",
    "quarantaine_in_herd_contact", "herds_of_origin_respiratory_symptoms", "herds_of_origin_influenza_diagnosis",
    "production_cycle", "mode_stable_occupation_ai_centre", "mode_stable_occupation_gilts_stable",
    "mode_stable_occupation_farrowing_stable", "litter_equalization_farrowing_stable",
    "mode_stable_occupation_weaner_stable", "mode_stable_occupation_fattener_stable",
    "passing_through_other_age_group", "outside_area",
    "outside_area_contact_poultry", "outside_area_contact_wild_birds", "outside_area_contact_wild_boars",
    "contact_poultry_in_stable", "cleaning_ai_centre", "cleaning_gilts_stable", "cleaning_farrowing_stable",
    "cleaning_weaner_stable", "cleaning_fattener_stable", "cleaning_quarantaine", "desinfection_ai_centre",
    "desinfection_gilts_stable", "desinfection_farrowing_stable", "desinfection_weaner_stable",
    "desinfection_fattener_stable", "desinfection_quarantaine", "drying_ai_centre", "drying_gilts_stable",
    "drying_farrowing_stable", "drying_weaner_stable", "drying_fattener_stable", "drying_quarantaine",
    "cleaning_desinfection_transport_vehicle", "cleaning_shipment_area", "caretaker_type", "caretaker_number",
    "caretaker_ppe_stable", "caretaker_ppe_washing_interval", "caretaker_ppe_per_unit", "caretaker_per_unit",
    "caretaker_work_flow_hygiene_between_units", "caretaker_entry_ppe_only", "caretaker_disease_management",
    "caretaker_hands_washed_before_entry", "caretaker_boot_desinfection", "caretaker_contact_other_pigs",
    "caretaker_contact_poultry", "visitors_in_stable_recent", "visitors_cumulative_contact_hours",
    "visitors_list", "ppe_visitors", "visitors_hands_washed_before_entry", "visitors_disease_management",
    "visitors_contact_other_pigs", "visitors_respiratory_symptoms", "seperation_between_production_units",
    "seperation_within_production_units", "seperation_quarantaine_area", "bird_nests",
    "verification_outside_area_contact_poultry", "verification_outside_area_contact_wild_birds",
    "verification_contact_poultry_stable", "verification_outside_area_contact_wild_boars",
    "farrowing_airspace_with_other_agegroup", "ai_airspace_with_other_agegroup",
    "gilts_airspace_with_other_agegroup", "weaners_airspace_with_other_agegroup",
    "fatteners_airspace_with_other_agegroup", "vet_consultation", "influenza_diagnosis", "influenza_vaccination"),
  c(exclude_vars, overview_dependent_vars)
)
animal_vars <- setdiff(
  c("ili_symptoms", "return_to_service_rate", "farrowing_rate", "piglets_per_sow_year",
    "abortions_per_sow_year", "piglet_mortality", "feed_conversion_rate_fatteners",
    "respiratory_history_swine", "time_respiratory_disease", "frequency_respi_outbreak",
    "start_time_current_outbreak", "outbreak_since_examination", "suckling_piglets_diseased",
    "weaners_diseased", "fatteners_diseased", "young_sows_diseased", "old_sows_diseased",
    "boars_diseased", "report_killed_suckling_piglets", "report_killed_weaners",
    "report_killed_fatteners", "report_killed_young_sows", "report_killed_old_sows",
    "symptom_swine_sneezing", "symptom_swine_coughing", "symptom_swine_nasal_discharge",
    "symptom_swine_fever", "symptom_swine_feed_intake_red", "symptom_swine_apathy",
    "symptom_swine_dyspnoea", "Age_weeks_factor", "farrowing_sows_coughing",
    "farrowing_piglets_reduced_general_wellbeing", "farrowing_piglet_litters_sneezing_percentage",
    "farrowing_piglet_litters_coughing_percentage", "weaners_reduced_general_wellbeing",
    "weaners_sneezing", "weaners_coughing", "weaners_discharge", "weaners_rectal_temperature",
    "fatteners_rectal_temperature", "fatteners_reduced_general_wellbeing", "fatteners_sneezing",
    "fatteners_coughing", "fatteners_discharge"),
  c(exclude_vars, overview_dependent_vars)
)
environment_vars <- setdiff(
  c("farrowing_room_temperature", "farrowing_nest_temperature_ok", "farrowing_airflow",
    "farrowing_air_quality", "ai_sows_room_temperature", "ai_sows_airflow", "ai_sows_air_quality",
    "gilts_qm_per_animal", "gitls_animals_per_water_source", "gilts_room_temperature",
    "gilts_airflow", "gilts_air_quality", "weaners_qm_per_animal", "weaners_animals_per_feeding_site_factor",
    "weaners_animals_per_water_source", "weaners_room_temperature", "weaners_airflow",
    "weaners_air_quality", "fatteners_qm_per_animal", "fatteners_feeding_site_per_animal_factor",
    "fatteners_animals_per_water_source", "fatteners_room_temperature", "fatteners_airflow",
    "fatteners_air_quality"),
  c(exclude_vars, overview_dependent_vars)
)
human_vars <- setdiff(
  c("respiratory_history_human", "respiratory_history_contact_person", "starting_point_current_disease",
    "symptom_human_sneezing", "symptom_human_coughing", "symptom_human_brobchitis",
    "symptom_human_pneumonia", "symptom_human_fever", "symptom_human_headache",
    "symptom_human_myalgia", "symptom_severity", "physician_consultation", "flu_vaccination",
    "flu_vaccination_contacts", "chronic_disease_condition", "smoker"),
  c(exclude_vars, overview_dependent_vars)
)

# ---------------------------------------------------------------------
# 2. CUSTOM TEST ASSIGNMENT FOR CONTINUOUS VARS
# ---------------------------------------------------------------------
wilcox_vars <- c(
  "number_fattening_pigs","number_boars","number_of_origins",
  "production_cycle","caretaker_number","visitors_in_stable_recent","visitors_cumulative_contact_hours",
  "start_time_current_outbreak","farrowing_airflow","ai_sows_airflow",
  "gilts_qm_per_animal","gilts_airflow",
  "weaners_sneezing","weaners_coughing","weaners_rectal_temperature","weaners_qm_per_animal",
  "weaners_animals_per_feeding_site_factor","weaners_animals_per_water_source","weaners_airflow","weaners_air_quality","weaners_airspace_with_other_agegroup",
  "fatteners_reduced_general_wellbeing","fatteners_sneezing","fatteners_coughing","fatteners_discharge","fatteners_airflow","fatteners_air_quality","fatteners_airspace_with_other_agegroup",
  "fatteners_feeding_site_per_animal_factor",
  "starting_point_current_disease",
  "farrowing_piglet_litters_sneezing_percentage",
  "farrowing_piglet_litters_coughing_percentage"
)
ttest_vars <- c(
  "herdsize","number_suckling_piglets","number_weaners","number_young_sows","number_old_sows",
  "gitls_animals_per_water_source","gilts_room_temperature",
  "weaners_room_temperature","fatteners_rectal_temperature","fatteners_qm_per_animal",
  "fatteners_animals_per_water_source","fatteners_room_temperature",
  "farrowing_room_temperature","ai_sows_room_temperature"
)

# ---------------------------------------------------------------------
# 3. HELPER FUNCTIONS FOR STATISTICAL TESTS
# ---------------------------------------------------------------------
chisq_or_fisher <- function(x, y) {
  tbl <- table(x, y)
  if (any(dim(tbl) < 2) || sum(tbl) == 0) return(list(test = "Not analyzable", pval = NA))
  expected <- outer(rowSums(tbl), colSums(tbl)) / sum(tbl)
  if (any(is.na(expected))) return(list(test = "Not analyzable", pval = NA))
  if (any(expected < 5, na.rm = TRUE)) {
    pval <- tryCatch(fisher.test(tbl)$p.value, error = function(e) NA)
    return(list(test = "Fisher's exact", pval = pval))
  } else {
    pval <- tryCatch(chisq.test(tbl)$p.value, error = function(e) NA)
    return(list(test = "Chi-squared", pval = pval))
  }
}

get_num_test <- function(x, y, var_name) {
  idx <- rep(TRUE, length(x))
  # Outlier removal (domain knowledge)
  if (var_name == "herdsize") idx <- x != max(x, na.rm=TRUE)
  if (var_name == "number_suckling_piglets") idx <- x != max(x, na.rm=TRUE)
  if (var_name == "number_weaners") idx <- x <= 1000
  if (var_name == "number_young_sows") idx <- x <= 100
  if (var_name == "number_old_sows") idx <- x <= 400
  if (var_name == "gitls_animals_per_water_source") idx <- x <= 25
  if (var_name == "fatteners_qm_per_animal") idx <- x <= 4
  if (var_name == "fatteners_animals_per_water_source") idx <- x <= 30
  x <- x[idx]; y <- y[idx]
  if (var_name %in% wilcox_vars) {
    pval <- tryCatch(wilcox.test(x ~ y, exact = FALSE)$p.value, error = function(e) NA)
    return(list(test = "Wilcoxon Mann-Whitney", pval = pval))
  } else if (var_name %in% ttest_vars) {
    pval <- tryCatch(t.test(x ~ y)$p.value, error = function(e) NA)
    return(list(test = "t-test", pval = pval))
  } else {
    return(list(test = "Not analyzable", pval = NA))
  }
}

perform_test <- function(var, outcome, var_name, type = "univariate") {
  if (is.null(var) || length(var) == 0 || all(is.na(var))) {
    return(list(variable = var_name, class = NA, levels = NA, pct_NA = 100,
                test = "Not analyzable", pval = NA, type = type))
  }
  df <- data.frame(x = var, y = outcome)
  df <- df[complete.cases(df), ]
  if (nrow(df) == 0) {
    return(list(variable = var_name, class = class(var)[1], levels = NA, pct_NA = 100,
                test = "Not analyzable", pval = NA, type = type))
  }
  df$y <- factor(df$y, levels = c(FALSE, TRUE))
  if (is.logical(df$x)) df$x <- factor(df$x, levels = c(FALSE, TRUE))
  na_pct <- mean(is.na(var)) * 100
  var_class <- class(var)
  if (is.factor(var)) {
    var_levels <- paste0(levels(var), collapse = ", ")
  } else if (is.logical(var)) {
    var_levels <- "FALSE, TRUE"
  } else {
    var_levels <- "continuous"
  }
  if (is.factor(var) | is.logical(var)) {
    res <- chisq_or_fisher(df$x, df$y)
  } else if (is.numeric(var)) {
    res <- get_num_test(df$x, df$y, var_name)
  } else {
    res <- list(test = "Not analyzable", pval = NA)
  }
  list(variable = var_name, class = var_class[1], levels = var_levels, pct_NA = round(na_pct, 1),
       test = res$test, pval = res$pval, type = type)
}

# ---------------------------------------------------------------------
# 4. ANALYSIS PER SUBSET (UNIVARIATE ONLY)
# ---------------------------------------------------------------------
analyze_subset <- function(var_names, subset_name, df, outcome_var) {
  # Univariate: test all eligible variables (continuous and categorical)
  univ_results <- purrr::map(var_names, ~perform_test(df[[.x]], df[[outcome_var]], .x, "univariate")) %>%
    dplyr::bind_rows()
  # Holm-Bonferroni correction: all univariate tests per subset
  holm <- p.adjust(univ_results$pval, method = "holm")
  univ_results$pval_holm <- holm
  # FDR correction: for univariate results per subset
  univ_results$pval_fdr <- p.adjust(univ_results$pval, method = "fdr")
  univ_results$subset <- subset_name
  univ_results
}

# ---------------------------------------------------------------------
# 5. RUN ANALYSIS FOR EACH SUBSET
# ---------------------------------------------------------------------
results_husbandry   <- analyze_subset(husbandry_vars,   "Husbandry",   df3, "SIV_positive")
results_animals     <- analyze_subset(animal_vars,      "Animals",     df3, "SIV_positive")
results_environment <- analyze_subset(environment_vars, "Environment", df3, "SIV_positive")
results_human       <- analyze_subset(human_vars,       "Human",       df3, "SIV_positive")

# ---------------------------------------------------------------------
# 6. OUTPUT FOUR INTERACTIVE TABLES IN ONE HTML FILE
# ---------------------------------------------------------------------
make_caption <- function(subset_name) {
  tags$caption(
    style = 'caption-side: top; text-align: left;',
    tags$strong(
      paste0(subset_name, ": Association with SIV_positive (univariate only)")
    ),
    tags$br(),
    tags$span(
      style = "font-size: 0.95em; color: #555;",
      "All rows are single-variable (univariate) tests.",
      tags$br(),
      "Statistical tests: See 'test' column. Categorical/discrete variables: chi-squared or Fisher's exact test; continuous: t-test or Wilcoxon (see 'test' column).",
      tags$br(),
      tags$strong(
        "pval_holm: Holm-Bonferroni correction (FWER, applied to all univariate tests per subset; only shown for p ≤ 0.1)."
      ),
      tags$br(),
      tags$strong(
        "pval_fdr: Benjamini-Hochberg FDR correction (applied to all univariate tests per subset)."
      ),
      tags$br(),
      "Missing values: See 'pct_NA' column. Outliers were removed for specific variables (see code).",
      tags$br(),
      tags$strong(
        "Note: Only univariate associations are shown. No interaction analyses are included."
      )
    )
  )
}

make_dt <- function(results, subset_name) {
  results %>%
    mutate(
      pval = signif(pval, 3),
      pval_holm = signif(pval_holm, 3),
      pval_fdr = signif(pval_fdr, 3)
    ) %>%
    select(variable, class, levels, pct_NA, test, pval, pval_holm, pval_fdr, type) %>%
    datatable(
      caption = make_caption(subset_name),
      filter = "top", rownames = FALSE, escape = FALSE,
      options = list(pageLength = 25, autoWidth = TRUE)
    )
}

dt_husbandry   <- make_dt(results_husbandry,   "Husbandry")
dt_animals     <- make_dt(results_animals,     "Animals")
dt_environment <- make_dt(results_environment, "Environment")
dt_human       <- make_dt(results_human,       "Human")

all_tables <- tagList(
  tags$h2("Univariate Association with SIV_positive by Subset"),
  dt_husbandry, tags$hr(),
  dt_animals, tags$hr(),
  dt_environment, tags$hr(),
  dt_human
)

save_html(all_tables, "association_siv_positive_by_subset.html")

# =====================================================================
# END OF SCRIPT
# =====================================================================
# - Univariate: Continuous variables are tested using custom assignment (t-test or Wilcoxon) for binary outcome.
# - Univariate: Categorical/discrete variables are tested using chi-squared or Fisher's exact test.
# - Holm-Bonferroni correction is applied ONCE to all p-values per subset.
# - FDR correction is applied to all univariate results per subset.
# - All exclusions and correction logic are clearly annotated.
# - All eligible variables in each subset are tested (excluding only those missing or all NA).
# - No interaction analyses are performed.
