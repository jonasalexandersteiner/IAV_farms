# =====================================================================
# INFERENTIAL ANALYSIS: Univariate Association, Significant Variable Comparison & Correlation
# ---------------------------------------------------------------------
# - For each outcome (SIV_positive, Clinical_SIV, ili_symptoms, symptomatic_report)
#   - For each subset (Husbandry, Animals, Environment, Human)
#     - Univariate association (FDR correction, interactive tables, highlight significant)
# - Output: Four HTML files (one per outcome)
#
# - Significant variable comparison table: association_all_var_sig_by_subset.html
# - Correlation for significant variables by subset:
#     - Spearman (numeric/binary pairs)
#     - Cramér's V (categorical pairs with >2 levels)
#     - Highlight strong correlation (|rho| or V ≥ 0.7)
# - Output: association_all_var_sig_corr_with_outcome_by_subset.html
# =====================================================================
# Best Practice:
# - Modular code, robust to variable types, color-coded/highlighted outputs
# - All outputs ready for publication, reporting, or further analysis
# =====================================================================

library(dplyr)
library(purrr)
library(DT)
library(htmltools)
library(ggplot2)
library(scales)

# ------------------ Variable and Subset Definitions -----------------------
exclude_vars_base <- c(
  "farm_id", "total_no_of_samples", "no_positive_pigs",
  "percentage_positive_pigs", "min_cp", "max_cp", "average_cp", "std_dev",
  "date_sampling", "source_of_contact_grouped"
)
overview_dependent_vars <- c(
  "quarantaine_time", "outside_area_ai_centre", "outside_area_gilts_stable",
  "outside_area_farrowing_stable", "outside_area_weaner_stable", "outside_area_fattener_stable"
)
make_exclude_vars <- function(outcome_var) unique(c(exclude_vars_base, overview_dependent_vars, outcome_var))

get_husbandry_vars <- function(exclude_vars) setdiff(
  c("symptomatic_report", "canton_factor", "herdsize", "production_type_factor",
    "Farrowing_on_farm", "Isemination_on_farm", "Gestation_on_farm", "Weaners_on_farm", "Fattening_on_farm",
    "horses_closeby", "dogs_closeby", "chicken_closeby", "turkey_closeby",
    "cattle_closeby", "cats_closeby", "other_pigs_closeby", "other_poultry_closeby",
    "number_suckling_piglets", "number_weaners", "number_fattening_pigs", "number_young_sows",
    "number_old_sows", "number_boars", "number_of_origins", "quarantaine_concept",
    "quarantaine_in_herd_contact", "herds_of_origin_respiratory_symptoms", "herds_of_origin_influenza_diagnosis",
    "production_cycle", "mode_stable_occupation_ai_centre", "mode_stable_occupation_gilts_stable",
    "mode_stable_occupation_farrowing_stable", "litter_equalization_farrowing_stable",
    "mode_stable_occupation_weaner_stable", "mode_stable_occupation_fattener_stable",
    "passing_through_other_age_group", "outside_area",
    "outside_area_contact_poultry", "outside_area_contact_wild_birds", "outside_area_contact_wild_boars",
    "contact_poultry_in_stable", "cleaning_ai_centre", "cleaning_gilts_stable", "cleaning_farrowing_stable",
    "cleaning_weaner_stable", "cleaning_fattener_stable", "cleaning_quarantaine", "desinfection_ai_centre",
    "desinfection_gilts_stable", "desinfection_farrowing_stable", "desinfection_weaner_stable",
    "desinfection_fattener_stable", "desinfection_quarantaine", "drying_ai_centre", "drying_gilts_stable",
    "drying_farrowing_stable", "drying_weaner_stable", "drying_fattener_stable", "drying_quarantaine",
    "cleaning_desinfection_transport_vehicle", "cleaning_shipment_area", "caretaker_type", "caretaker_number",
    "caretaker_ppe_stable", "caretaker_ppe_washing_interval", "caretaker_ppe_per_unit", "caretaker_per_unit",
    "caretaker_work_flow_hygiene_between_units", "caretaker_entry_ppe_only", "caretaker_disease_management",
    "caretaker_hands_washed_before_entry", "caretaker_boot_desinfection", "caretaker_contact_other_pigs",
    "caretaker_contact_poultry", "visitors_in_stable_recent", "visitors_cumulative_contact_hours",
    "visitors_list", "ppe_visitors", "visitors_hands_washed_before_entry", "visitors_disease_management",
    "visitors_contact_other_pigs", "visitors_respiratory_symptoms", "seperation_between_production_units",
    "seperation_within_production_units", "seperation_quarantaine_area", "bird_nests",
    "verification_outside_area_contact_poultry", "verification_outside_area_contact_wild_birds",
    "verification_contact_poultry_stable", "verification_outside_area_contact_wild_boars",
    "farrowing_airspace_with_other_agegroup", "ai_airspace_with_other_agegroup",
    "gilts_airspace_with_other_agegroup", "weaners_airspace_with_other_agegroup",
    "fatteners_airspace_with_other_agegroup", "vet_consultation", "influenza_diagnosis", "influenza_vaccination"),
  exclude_vars)
get_animal_vars <- function(exclude_vars) setdiff(
  c("ili_symptoms", "return_to_service_rate", "farrowing_rate", "piglets_per_sow_year",
    "abortions_per_sow_year", "piglet_mortality", "feed_conversion_rate_fatteners",
    "respiratory_history_swine", "time_respiratory_disease", "frequency_respi_outbreak",
    "start_time_current_outbreak", "outbreak_since_examination", "suckling_piglets_diseased",
    "weaners_diseased", "fatteners_diseased", "young_sows_diseased", "old_sows_diseased",
    "boars_diseased", "report_killed_suckling_piglets", "report_killed_weaners",
    "report_killed_fatteners", "report_killed_young_sows", "report_killed_old_sows",
    "symptom_swine_sneezing", "symptom_swine_coughing", "symptom_swine_nasal_discharge",
    "symptom_swine_fever", "symptom_swine_feed_intake_red", "symptom_swine_apathy",
    "symptom_swine_dyspnoea", "Age_weeks_factor", "farrowing_sows_coughing",
    "farrowing_piglets_reduced_general_wellbeing", "farrowing_piglet_litters_sneezing_percentage",
    "farrowing_piglet_litters_coughing_percentage", "weaners_reduced_general_wellbeing",
    "weaners_sneezing", "weaners_coughing", "weaners_discharge", "weaners_rectal_temperature",
    "fatteners_rectal_temperature", "fatteners_reduced_general_wellbeing", "fatteners_sneezing",
    "fatteners_coughing", "fatteners_discharge"),
  exclude_vars)
get_environment_vars <- function(exclude_vars) setdiff(
  c("farrowing_room_temperature", "farrowing_nest_temperature_ok", "farrowing_airflow",
    "farrowing_air_quality", "ai_sows_room_temperature", "ai_sows_airflow", "ai_sows_air_quality",
    "gilts_qm_per_animal", "gitls_animals_per_water_source", "gilts_room_temperature",
    "gilts_airflow", "gilts_air_quality", "weaners_qm_per_animal", "weaners_animals_per_feeding_site_factor",
    "weaners_animals_per_water_source", "weaners_room_temperature", "weaners_airflow",
    "weaners_air_quality", "fatteners_qm_per_animal", "fatteners_feeding_site_per_animal_factor",
    "fatteners_animals_per_water_source", "fatteners_room_temperature", "fatteners_airflow",
    "fatteners_air_quality"),
  exclude_vars)
get_human_vars <- function(exclude_vars) setdiff(
  c("respiratory_history_human", "respiratory_history_contact_person", "starting_point_current_disease",
    "symptom_human_sneezing", "symptom_human_coughing", "symptom_human_brobchitis",
    "symptom_human_pneumonia", "symptom_human_fever", "symptom_human_headache",
    "symptom_human_myalgia", "symptom_severity", "physician_consultation", "flu_vaccination",
    "flu_vaccination_contacts", "chronic_disease_condition", "smoker"),
  exclude_vars)

# ------------ Custom test assignment for continuous vars -------------
wilcox_vars <- c(
  "number_fattening_pigs","number_boars","number_of_origins",
  "production_cycle","caretaker_number","visitors_in_stable_recent","visitors_cumulative_contact_hours",
  "start_time_current_outbreak","farrowing_airflow","ai_sows_airflow",
  "gilts_qm_per_animal","gilts_airflow",
  "weaners_sneezing","weaners_coughing","weaners_rectal_temperature","weaners_qm_per_animal",
  "weaners_animals_per_feeding_site_factor","weaners_animals_per_water_source","weaners_airflow","weaners_air_quality","weaners_airspace_with_other_agegroup",
  "fatteners_reduced_general_wellbeing","fatteners_sneezing","fatteners_coughing","fatteners_discharge","fatteners_airflow","fatteners_air_quality","fatteners_airspace_with_other_agegroup",
  "fatteners_feeding_site_per_animal_factor",
  "starting_point_current_disease",
  "farrowing_piglet_litters_sneezing_percentage",
  "farrowing_piglet_litters_coughing_percentage"
)
ttest_vars <- c(
  "herdsize","number_suckling_piglets","number_weaners","number_young_sows","number_old_sows",
  "gitls_animals_per_water_source","gilts_room_temperature",
  "weaners_room_temperature","fatteners_rectal_temperature","fatteners_qm_per_animal",
  "fatteners_animals_per_water_source","fatteners_room_temperature",
  "farrowing_room_temperature","ai_sows_room_temperature"
)

chisq_or_fisher <- function(x, y) {
  tbl <- table(x, y)
  if (any(dim(tbl) < 2) || sum(tbl) == 0) return(list(test = "Not analyzable", pval = NA))
  expected <- outer(rowSums(tbl), colSums(tbl)) / sum(tbl)
  if (any(is.na(expected))) return(list(test = "Not analyzable", pval = NA))
  if (any(expected < 5, na.rm = TRUE)) {
    pval <- tryCatch(fisher.test(tbl)$p.value, error = function(e) NA)
    return(list(test = "Fisher's exact", pval = pval))
  } else {
    pval <- tryCatch(chisq.test(tbl)$p.value, error = function(e) NA)
    return(list(test = "Chi-squared", pval = pval))
  }
}

get_num_test <- function(x, y, var_name) {
  idx <- rep(TRUE, length(x))
  # Outlier removal for specific vars (domain knowledge)
  if (var_name == "herdsize") idx <- x != max(x, na.rm=TRUE)
  if (var_name == "number_suckling_piglets") idx <- x != max(x, na.rm=TRUE)
  if (var_name == "number_weaners") idx <- x <= 1000
  if (var_name == "number_young_sows") idx <- x <= 100
  if (var_name == "number_old_sows") idx <- x <= 400
  if (var_name == "gitls_animals_per_water_source") idx <- x <= 25
  if (var_name == "fatteners_qm_per_animal") idx <- x <= 4
  if (var_name == "fatteners_animals_per_water_source") idx <- x <= 30
  x <- x[idx]; y <- y[idx]
  if (var_name %in% wilcox_vars) {
    pval <- tryCatch(wilcox.test(x ~ y, exact = FALSE)$p.value, error = function(e) NA)
    return(list(test = "Wilcoxon Mann-Whitney", pval = pval))
  } else if (var_name %in% ttest_vars) {
    pval <- tryCatch(t.test(x ~ y)$p.value, error = function(e) NA)
    return(list(test = "t-test", pval = pval))
  } else {
    return(list(test = "Not analyzable", pval = NA))
  }
}

perform_test <- function(var, outcome, var_name) {
  if (is.null(var) || length(var) == 0 || all(is.na(var))) {
    return(list(variable = var_name, class = NA, levels = NA, pct_NA = 100, test = "Not analyzable", pval = NA))
  }
  df <- data.frame(x = var, y = outcome)
  df <- df[complete.cases(df), ]
  if (nrow(df) == 0) {
    return(list(variable = var_name, class = class(var)[1], levels = NA, pct_NA = 100, test = "Not analyzable", pval = NA))
  }
  df$y <- factor(df$y, levels = c(FALSE, TRUE))
  if (is.logical(df$x)) df$x <- factor(df$x, levels = c(FALSE, TRUE))
  na_pct <- mean(is.na(var)) * 100
  var_class <- class(var)
  if (is.factor(var)) {
    var_levels <- paste0(levels(var), collapse = ", ")
  } else if (is.logical(var)) {
    var_levels <- "FALSE, TRUE"
  } else {
    var_levels <- "continuous"
  }
  if (is.factor(var) | is.logical(var)) {
    res <- chisq_or_fisher(df$x, df$y)
  } else if (is.numeric(var)) {
    res <- get_num_test(df$x, df$y, var_name)
  } else {
    res <- list(test = "Not analyzable", pval = NA)
  }
  list(variable = var_name, class = var_class[1], levels = var_levels, pct_NA = round(na_pct, 1), test = res$test, pval = res$pval)
}

analyze_subset <- function(var_names, subset_name, df, outcome_var) {
  univ_results <- purrr::map(var_names, ~perform_test(df[[.x]], df[[outcome_var]], .x)) %>%
    dplyr::bind_rows()
  univ_results$pval_fdr <- p.adjust(univ_results$pval, method = "fdr")
  univ_results$subset <- subset_name
  univ_results
}

make_caption <- function(subset_name, outcome_name) {
  tags$caption(
    style = 'caption-side: top; text-align: left;',
    tags$strong(
      paste0(subset_name, ": Association with ", outcome_name, " (univariate only)")
    ),
    tags$br(),
    tags$span(
      style = "font-size: 0.95em; color: #555;",
      "Statistical tests: See 'Test' column. Categorical/discrete: chi-squared or Fisher's exact; continuous: t-test or Wilcoxon (see 'Test' column).",
      tags$br(),
      tags$strong(
        "p_FDR: Benjamini-Hochberg FDR correction (values ≤ 0.1 highlighted in green)."
      ),
      tags$br(),
      "Missing values: See '% NA'. Outliers removed for specific variables (see code).",
      tags$br(),
      "Only univariate associations are shown. No interaction analyses."
    )
  )
}

highlight_fdr <- function(pval_fdr) {
  if (is.na(pval_fdr)) return("")
  if (pval_fdr <= 0.1) {
    return(sprintf('<span style="color:green;font-weight:bold;">%.3g</span>', pval_fdr))
  } else {
    return(sprintf('%.3g', pval_fdr))
  }
}

make_dt <- function(results, subset_name, outcome_name) {
  results %>%
    mutate(
      pval = signif(pval, 3),
      pval_fdr_html = purrr::map_chr(pval_fdr, highlight_fdr)
    ) %>%
    select(variable, class, levels, pct_NA, test, pval, pval_fdr_html) %>%
    datatable(
      caption = make_caption(subset_name, outcome_name),
      filter = "top", rownames = FALSE, escape = FALSE,
      options = list(pageLength = 25, autoWidth = TRUE),
      colnames = c("Variable", "Class", "Levels", "% NA", "Test", "p-Value", "p_FDR")
    )
}

# ======================== MAIN ANALYSIS LOOP =========================
outcomes <- list(
  SIV_positive = "SIV_positive",
  Clinical_SIV = "Clinical_SIV",
  ili_symptoms = "ili_symptoms",
  symptomatic_report = "symptomatic_report"
)

all_results <- list()
for (outcome_name in names(outcomes)) {
  outcome_var <- outcomes[[outcome_name]]
  
  # Prepare analysis data frame for this outcome
  if (outcome_name == "Clinical_SIV") {
    # For Clinical_SIV, exclude samples where symptomatic_report == TRUE & SIV_positive == FALSE
    df_analysis <- df3 %>%
      filter(!(symptomatic_report == TRUE & SIV_positive == FALSE)) %>%
      mutate(Clinical_SIV = SIV_positive & ili_symptoms)
    # Add annotation for Clinical_SIV filtering
    clinical_siv_filter_note <- tags$p(
      tags$em(
        "Note: For Clinical_SIV, oberservations where symptomatic_report = TRUE and SIV_positive = FALSE were excluded prior to this analysis."
      )
    )
  } else {
    # For all other outcomes, keep all rows
    df_analysis <- df3 %>%
      mutate(Clinical_SIV = SIV_positive & ili_symptoms)
    clinical_siv_filter_note <- NULL
  }
  
  # Determine variable sets for this outcome (excluding outcome/irrelevant vars)
  exclude_vars <- make_exclude_vars(outcome_var)
  husbandry_vars   <- get_husbandry_vars(exclude_vars)
  animal_vars      <- get_animal_vars(exclude_vars)
  environment_vars <- get_environment_vars(exclude_vars)
  human_vars       <- get_human_vars(exclude_vars)
  
  # Run analyses per subset
  results_husbandry   <- analyze_subset(husbandry_vars,   "Husbandry",   df_analysis, outcome_var)
  results_animals     <- analyze_subset(animal_vars,      "Animals",     df_analysis, outcome_var)
  results_environment <- analyze_subset(environment_vars, "Environment", df_analysis, outcome_var)
  results_human       <- analyze_subset(human_vars,       "Human",       df_analysis, outcome_var)
  
  # Save results for comparison
  all_results[[outcome_name]] <- list(
    Husbandry = results_husbandry,
    Animals = results_animals,
    Environment = results_environment,
    Human = results_human
  )
  
  # Generate interactive tables for each subset
  dt_husbandry   <- make_dt(results_husbandry,   "Husbandry",   outcome_name)
  dt_animals     <- make_dt(results_animals,     "Animals",     outcome_name)
  dt_environment <- make_dt(results_environment, "Environment", outcome_name)
  dt_human       <- make_dt(results_human,       "Human",       outcome_name)
  
  # Assemble and save HTML output for this outcome
  all_tables <- tagList(
    tags$h2(paste("Univariate Association with", outcome_name, "by Subset")),
    # Add the clinical_siv_filter_note to the heading if present
    clinical_siv_filter_note,
    dt_husbandry, tags$hr(),
    dt_animals, tags$hr(),
    dt_environment, tags$hr(),
    dt_human
  )
  save_html(all_tables, file = paste0("04_output/association_", outcome_name, "_by_subset.html"))
}


# =================== SIGNIFICANT VARIABLE COMPARISON =================
make_sig_table <- function(subset_name, results_list) {
  sig_vars <- unique(
    unlist(lapply(results_list, function(df) df$variable[df$pval_fdr <= 0.1 & !is.na(df$pval_fdr)]))
  )
  comp_df <- data.frame(
    Variable_SIV = sig_vars,
    p_FDR_SIV = sapply(sig_vars, function(v) {
      x <- results_list[["SIV_positive"]]
      val <- x$pval_fdr[x$variable == v]; if (length(val) == 0) NA else val
    }),
    Variable_Clinical_SIV = sig_vars,
    p_FDR_Clinical_SIV = sapply(sig_vars, function(v) {
      x <- results_list[["Clinical_SIV"]]
      val <- x$pval_fdr[x$variable == v]; if (length(val) == 0) NA else val
    }),
    Variable_ili_symptoms = sig_vars,
    p_FDR_ili_symptoms = sapply(sig_vars, function(v) {
      x <- results_list[["ili_symptoms"]]
      val <- x$pval_fdr[x$variable == v]; if (length(val) == 0) NA else val
    }),
    Variable_symptomatic_report = sig_vars,
    p_FDR_symptomatic_report = sapply(sig_vars, function(v) {
      x <- results_list[["symptomatic_report"]]
      val <- x$pval_fdr[x$variable == v]; if (length(val) == 0) NA else val
    }),
    stringsAsFactors = FALSE
  )
  for (col in c("p_FDR_SIV","p_FDR_Clinical_SIV","p_FDR_ili_symptoms","p_FDR_symptomatic_report")) {
    comp_df[[paste0(col,"_html")]] <- sapply(comp_df[[col]], function(pval_fdr) {
      if (is.na(pval_fdr)) return("")
      if (pval_fdr <= 0.1) {
        return(sprintf('<span style="color:green;font-weight:bold;">%.3g</span>', pval_fdr))
      } else {
        return(sprintf('%.3g', pval_fdr))
      }
    })
  }
  datatable(
    comp_df %>%
      select(
        Variable_SIV, p_FDR_SIV_html,
        Variable_Clinical_SIV, p_FDR_Clinical_SIV_html,
        Variable_ili_symptoms, p_FDR_ili_symptoms_html,
        Variable_symptomatic_report, p_FDR_symptomatic_report_html
      ),
    escape = FALSE, rownames = FALSE,
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: left;',
      htmltools::tags$strong(
        paste0(subset_name, ": Significant Variables (p_FDR ≤ 0.1 in any analysis)")
      ),
      htmltools::tags$br(),
      "Side-by-side comparison: variables and p_FDR values from all four analyses."
    ),
    colnames = c(
      "Variable (SIV_positive)", "p_FDR (SIV_positive)",
      "Variable (Clinical_SIV)", "p_FDR (Clinical_SIV)",
      "Variable (ili_symptoms)", "p_FDR (ili_symptoms)",
      "Variable (symptomatic_report)", "p_FDR (symptomatic_report)"
    ),
    options = list(pageLength = 30, autoWidth = TRUE)
  )
}

sig_tables <- tagList(
  tags$h2("Variables with p_FDR ≤ 0.1 in Any Analysis (Side-by-side Comparison)"),
  make_sig_table("Husbandry",   lapply(all_results, function(r) r$Husbandry)), tags$hr(),
  make_sig_table("Animals",     lapply(all_results, function(r) r$Animals)), tags$hr(),
  make_sig_table("Environment", lapply(all_results, function(r) r$Environment)), tags$hr(),
  make_sig_table("Human",       lapply(all_results, function(r) r$Human))
)
save_html(sig_tables, file = "04_output/association_all_var_sig_by_subset.html")

# =================== CORRELATION OF SIGNIFICANT VARIABLES =================
# Prepare dataframes for correlation/comparison tables with proper filtering
df3_analysis_clinical <- df3 %>%
  filter(!(symptomatic_report == TRUE & SIV_positive == FALSE)) %>%
  mutate(Clinical_SIV = SIV_positive & ili_symptoms)
df3_analysis_full <- df3 %>%
  mutate(Clinical_SIV = SIV_positive & ili_symptoms)
get_df_for_outcome <- function(outcome) {
  if (outcome == "Clinical_SIV") {
    return(df3_analysis_clinical)
  } else {
    return(df3_analysis_full)
  }
}

cramers_v <- function(x, y) {
  idx <- complete.cases(x, y)
  x <- x[idx]; y <- y[idx]
  n <- length(x)
  if (n < 3) return(list(V=NA, n=n))
  tbl <- table(x, y)
  if (any(dim(tbl) < 2) || sum(tbl) == 0) return(list(V=NA, n=n))
  chi2 <- suppressWarnings(chisq.test(tbl, correct = FALSE)$statistic)
  k <- min(nrow(tbl), ncol(tbl))
  V <- sqrt(chi2 / (n * (k - 1)))
  return(list(V=as.numeric(V), n=n))
}

spearman_cor <- function(x, y) {
  idx <- complete.cases(x, y)
  x <- x[idx]; y <- y[idx]
  n <- length(x)
  if (n < 3) return(list(rho=NA, pval=NA, n=n))
  ct <- suppressWarnings(cor.test(x, y, method = "spearman"))
  return(list(rho=ct$estimate, pval=ct$p.value, n=n))
}

is_binary <- function(x) {
  (is.factor(x) && length(levels(x)) == 2) ||
    (is.logical(x)) ||
    (is.numeric(x) && length(unique(na.omit(x))) == 2)
}
is_numeric <- function(x) is.numeric(x)
is_categorical <- function(x) is.factor(x) && length(levels(x)) > 2

get_var_outcome_correlation <- function(var_name, outcome_name, df, min_n = 10, min_unique = 2) {
  x <- df[[var_name]]
  y <- df[[outcome_name]]
  idx <- complete.cases(x, y)
  x <- x[idx]; y <- y[idx]
  n <- length(x)
  u_x <- length(unique(x))
  u_y <- length(unique(y))
  if (n < min_n) {
    return(list(
      html=sprintf('<span style="color:gray;" title="N=%d: Fewer than %d paired observations">Insufficient data</span>', n, min_n),
      n=n
    ))
  }
  if (u_x < min_unique || u_y < min_unique) {
    return(list(
      html=sprintf('<span style="color:gray;" title="N=%d: Variable or outcome lacks variability (unique values: var=%d, outcome=%d)">Insufficient data</span>', n, u_x, u_y),
      n=n
    ))
  }
  if ((is_numeric(x) || is_binary(x)) && !is_categorical(x)) {
    if (is.logical(x)) x <- as.numeric(x)
    if (is.factor(x) && length(levels(x)) == 2) x <- as.numeric(x) - 1
    if (is.logical(y)) y <- as.numeric(y)
    if (is.factor(y) && length(levels(y)) == 2) y <- as.numeric(y) - 1
    res <- spearman_cor(x, y)
    if (is.na(res$rho)) {
      return(list(
        html=sprintf('<span style="color:gray;" title="N=%d: Could not compute Spearman correlation">Insufficient data</span>', res$n),
        n=res$n
      ))
    }
    if (abs(res$rho) >= 0.7) {
      html <- sprintf(
        '<span title="Spearman rho=%.2f, p=%.3g, N=%d. Strong correlation (|rho|≥0.7, highlighted orange and bold).">\
<span style="color:orange;font-weight:bold;">%.2f</span></span>',
        res$rho, res$pval, res$n, res$rho
      )
    } else {
      html <- sprintf(
        '<span title="Spearman rho=%.2f, p=%.3g, N=%d.">%.2f</span>',
        res$rho, res$pval, res$n, res$rho
      )
    }
    return(list(html=html, n=res$n))
  } else {
    res <- cramers_v(x, y)
    if (is.na(res$V)) {
      return(list(
        html=sprintf('<span style="color:gray;" title="N=%d: Could not compute Cramér\'s V">Insufficient data</span>', res$n),
        n=res$n
      ))
    }
    if (res$V >= 0.7) {
      html <- sprintf(
        '<span title="Cramér\'s V=%.2f, N=%d. Strong association (V≥0.7, highlighted orange and bold).">\
<span style="color:orange;font-weight:bold;">%.2f</span></span>',
        res$V, res$n, res$V
      )
    } else {
      html <- sprintf(
        '<span title="Cramér\'s V=%.2f, N=%d.">%.2f</span>',
        res$V, res$n, res$V
      )
    }
    return(list(html=html, n=res$n))
  }
}

make_outcome_corr_table <- function(subset_name, sig_vars, df, outcome_names) {
  tab <- data.frame(
    Variable = sig_vars,
    SIV_positive = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "SIV_positive", df)$html),
    Clinical_SIV = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "Clinical_SIV", df)$html),
    ili_symptoms = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "ili_symptoms", df)$html),
    symptomatic_report = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "symptomatic_report", df)$html),
    N_SIV_positive = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "SIV_positive", df)$n),
    N_Clinical_SIV = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "Clinical_SIV", df)$n),
    N_ili_symptoms = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "ili_symptoms", df)$n),
    N_symptomatic_report = sapply(sig_vars, function(v) get_var_outcome_correlation(v, "symptomatic_report", df)$n),
    stringsAsFactors = FALSE
  )
  datatable(
    tab,
    escape = FALSE, rownames = FALSE,
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: left;',
      htmltools::tags$strong(
        paste0(subset_name, ": Correlation of Significant Variables with Outcomes")
      ),
      htmltools::tags$br(),
      "For each variable, correlation is shown with each outcome (columns SIV_positive, Clinical_SIV, ili_symptoms, symptomatic_report).",
      htmltools::tags$br(),
      "Only significant variables (p_FDR ≤ 0.1 in any univariate analysis) are included.",
      htmltools::tags$br(),
      "Correlation type: Spearman for numeric or binary variables (after conversion); Cramér's V for categorical variables with >2 levels.",
      htmltools::tags$br(),
      "Each cell shows the correlation coefficient (rho or V); mouseover for a tooltip with coefficient, p-value (if applicable), and N (number of paired non-missing observations used).",
      htmltools::tags$br(),
      htmltools::tags$span(
        style = "color:orange;font-weight:bold;",
        "Strong correlation (|rho| or V ≥ 0.7, positive OR negative) highlighted in orange and bold."
      ),
      htmltools::tags$br(),
      htmltools::tags$span(
        style = "color:gray;",
        '"Insufficient data" is shown when fewer than 10 paired observations or not enough unique values.'
      ),
      htmltools::tags$br(),
      "Columns N_* show the number of paired non-missing rows for each variable-outcome correlation."
    ),
    colnames = c(
      "Variable",
      "SIV_positive", "Clinical_SIV", "ili_symptoms", "symptomatic_report",
      "N SIV_positive", "N Clinical_SIV", "N ili_symptoms", "N symptomatic_report"
    ),
    options = list(pageLength = 30, autoWidth = TRUE)
  )
}

corr_tables <- tagList(
  tags$h2("Correlation of Significant Variables with Outcomes by Subset (N used for each correlation)"),
  {
    subset_name <- "Husbandry"
    sig_vars <- unique(
      unlist(lapply(all_results, function(r) r$Husbandry$variable[r$Husbandry$pval_fdr <= 0.1 & !is.na(r$Husbandry$pval_fdr)]))
    )
    if (length(sig_vars) == 0) {
      tags$p("No significant variables for this subset.")
    } else {
      make_outcome_corr_table(
        subset_name,
        sig_vars,
        df3_analysis_full,
        c("SIV_positive","Clinical_SIV","ili_symptoms","symptomatic_report")
      )
    }
  }, tags$hr(),
  {
    subset_name <- "Animals"
    sig_vars <- unique(
      unlist(lapply(all_results, function(r) r$Animals$variable[r$Animals$pval_fdr <= 0.1 & !is.na(r$Animals$pval_fdr)]))
    )
    if (length(sig_vars) == 0) {
      tags$p("No significant variables for this subset.")
    } else {
      make_outcome_corr_table(
        subset_name,
        sig_vars,
        df3_analysis_full,
        c("SIV_positive","Clinical_SIV","ili_symptoms","symptomatic_report")
      )
    }
  }, tags$hr(),
  {
    subset_name <- "Environment"
    sig_vars <- unique(
      unlist(lapply(all_results, function(r) r$Environment$variable[r$Environment$pval_fdr <= 0.1 & !is.na(r$Environment$pval_fdr)]))
    )
    if (length(sig_vars) == 0) {
      tags$p("No significant variables for this subset.")
    } else {
      make_outcome_corr_table(
        subset_name,
        sig_vars,
        df3_analysis_full,
        c("SIV_positive","Clinical_SIV","ili_symptoms","symptomatic_report")
      )
    }
  }, tags$hr(),
  {
    subset_name <- "Human"
    sig_vars <- unique(
      unlist(lapply(all_results, function(r) r$Human$variable[r$Human$pval_fdr <= 0.1 & !is.na(r$Human$pval_fdr)]))
    )
    if (length(sig_vars) == 0) {
      tags$p("No significant variables for this subset.")
    } else {
      make_outcome_corr_table(
        subset_name,
        sig_vars,
        df3_analysis_full,
        c("SIV_positive","Clinical_SIV","ili_symptoms","symptomatic_report")
      )
    }
  }
)
save_html(corr_tables, file = "04_output/association_all_var_sig_corr_with_outcome_by_subset.html")

# =====================================================================
# END OF SCRIPT
# =====================================================================
# - All main analyses and outputs are included: univariate, sig variable comparison, correlation to outcomes.
# - Clinical_SIV analysis uses filtered data as specified.
# - All other outcomes and summary tables use the full dataset unless otherwise needed.