
# ----
# Script: Association with SIV_positive at multiple cutoffs, grouped by p-value trend, linear x axis, with maximal row spacing and SIV >=20%
# ----

# ---------- STEP 1: Create alternative SIV outcome variables ----------
df3 <- df3 %>%
  mutate(
    SIV_positive_0  = percentage_positive_pigs > 0,
    SIV_positive_10 = percentage_positive_pigs > 10,
    SIV_positive_15 = percentage_positive_pigs > 15
  )

# ---------- STEP 2: Select variables to test ----------
exclude_vars <- c("farm_id", "SIV_positive", "SIV_positive_0", "SIV_positive_10", "SIV_positive_15",
                  "total_no_of_samples", "no_positive_pigs", "percentage_positive_pigs", "min_cp", "max_cp",
                  "average_cp", "std_dev", "date_sampling")
vars_to_test <- setdiff(names(df3), exclude_vars)

# ---------- STEP 3: Function to run univariate tests ----------
get_pvals <- function(outcome_var) {
  test_results <- purrr::map(vars_to_test, ~perform_test(df3[[.x]], df3[[outcome_var]], .x))
  bind_rows(test_results) %>% mutate(outcome = outcome_var)
}

# ---------- STEP 4: Run for all three outcomes ----------
pvals_0  <- get_pvals("SIV_positive_0")
pvals_10 <- get_pvals("SIV_positive_10")
pvals_15 <- get_pvals("SIV_positive_15")

# ---------- STEP 5: Combine and tidy ----------
pvals_all <- bind_rows(pvals_0, pvals_10, pvals_15) %>%
  group_by(outcome) %>%
  mutate(pval_adj = p.adjust(pval, method = "BH")) %>%
  ungroup() %>%
  mutate(
    outcome = factor(
      outcome,
      levels = c("SIV_positive_0", "SIV_positive_10", "SIV_positive_15"),
      labels = c(">0%", ">10%", ">15%")
    )
  )

# ---------- STEP 6: Compute p-value trend group ----------
pv_wide <- pvals_all %>%
  select(variable, outcome, pval_adj) %>%
  tidyr::pivot_wider(names_from = outcome, values_from = pval_adj) %>%
  rename(
    p0 = `>0%`,
    p10 = `>10%`,
    p15 = `>15%`
  ) %>%
  mutate(
    change_direction = dplyr::case_when(
      is.na(p0) | is.na(p10) | is.na(p15) ~ "No change",
      abs(p0 - p15) < 1e-7 ~ "No change",
      p0 < p15 ~ "Increase",
      p0 > p15 ~ "Decrease",
      TRUE ~ "No change"
    )
  )

# ---------- STEP 7: Prepare summary and p-value columns for all cut-offs in one row ----------
# Pivot wider on all relevant columns: pval, pval_adj, and summary
table_wide <- pvals_all %>%
  select(variable, outcome, pval, pval_adj, summary) %>%
  mutate(
    outcome_label = recode(outcome, `>0%` = "0", `>10%` = "10", `>15%` = "15")
  ) %>%
  tidyr::pivot_wider(
    id_cols = variable,
    names_from = outcome_label,
    values_from = c(pval, pval_adj, summary),
    names_glue = "{.value}_{outcome_label}"
  )

# Merge in change_direction
table_wide <- table_wide %>%
  left_join(pv_wide %>% select(variable, change_direction), by = "variable")

# Optionally, reorder columns
table_wide <- table_wide %>%
  select(variable, change_direction,
         pval_0, pval_adj_0, summary_0,
         pval_10, pval_adj_10, summary_10,
         pval_15, pval_adj_15, summary_15)

# ---------- STEP 8: Clean numbers for table viewing ----------
table_wide <- table_wide %>%
  mutate(
    dplyr::across(starts_with("pval"), ~ signif(., 3))
  )

# ---------- STEP 9: Output as interactive datatable ----------
library(DT)
library(htmlwidgets)

datatable_out <- DT::datatable(
  table_wide,
  caption = "Association with SIV positivity at different cutoffs (FDR-corrected): each row is a variable, columns show results for each SIV cut-off.",
  filter = "top",
  rownames = FALSE,
  escape = FALSE,
  options = list(pageLength = 25, autoWidth = TRUE, scrollX = TRUE)
)

DT::saveWidget(datatable_out, "association_siv_positive_interactive_table_bytrend_wide.html", selfcontained = TRUE)

# ========================== PLOT as before ==========================
# ---------- Prepare for plot ----------
plot_data <- pvals_all %>%
  left_join(
    pv_wide %>% select(variable, change_direction),
    by = "variable"
  )

# ---------- Order variables within groups by min p-value ----------
plot_data <- plot_data %>%
  group_by(change_direction, variable) %>%
  mutate(min_p = min(pval_adj, na.rm = TRUE)) %>%
  ungroup() %>%
  arrange(change_direction, min_p) %>%
  mutate(variable = factor(variable, levels = unique(variable)))

# ---------- Calculate dynamic plot height for maximal row spacing ----------
n_vars <- length(unique(plot_data$variable))
plot_height <- max(12, n_vars * 0.9)  # 0.9 inches per variable, at least 12 inches

# ---------- Plot (linear x axis, maximal row spacing, dynamic height) ----------
library(ggplot2)

g <- ggplot(plot_data, aes(y = variable, x = pval_adj, color = outcome)) +
  geom_point(size = 4, alpha = 0.9) +
  geom_vline(xintercept = 0.05, linetype = "dashed", color = "red") +
  facet_grid(change_direction ~ ., scales = "free_y", space = "free_y") +
  scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.05)) +
  labs(
    y = "Variable",
    x = "FDR-adjusted p-value (linear scale)",
    title = "Association with SIV positivity: Variable grouping by p-value trend",
    subtitle = "Faceted by: No change, Increase, Decrease in p-value across SIV thresholds"
  ) +
  scale_color_brewer(palette = "Set1") +
  theme_minimal(base_size = 22) +
  theme(
    panel.grid.minor = element_blank(),
    strip.text.y = element_text(angle = 0, size = 22, face = "bold"),
    axis.text.y = element_text(margin = margin(r = 100), size = 18, face = "bold"),
    axis.ticks.length.y = unit(40, "pt"),
    axis.text.x = element_text(size = 18),
    plot.margin = margin(2, 2, 2, 5, "cm"),
    panel.spacing = unit(4, "lines")
  )

print(g)

# ---------- Save as PDF with limitsize = FALSE ----------
ggsave("SIV_association_pvalues_thresholds_bytrend_linear_dynamicheight.pdf",
       plot = g, width = 22, height = plot_height, limitsize = FALSE)

